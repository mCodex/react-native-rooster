import type { ReactElement, ReactNode } from 'react';
import type { StyleProp, TextStyle, ViewStyle } from 'react-native';

/** Permitted toast variants for built-in styling. */
export type ToastType = 'success' | 'error' | 'info' | 'warning';

/** Placement for the toast stack within the viewport. */
export type ToastPlacement = 'top' | 'bottom';

/** Signature for easing functions used by react-native Animated. */
export type ToastEasingFunction = (value: number) => number;

/**
 * Shape of a toast message managed by the provider.
 * Optional properties extend customisation without breaking existing usage.
 */
export interface ToastMessage {
  /** Unique identifier generated by the provider. */
  id: string;
  /** Type controls background colour through the active config. Defaults to `info`. */
  type?: ToastType;
  /** Optional heading displayed above the message body. */
  title?: string;
  /** Core message presented to the user. */
  message: string;
  /** Optional React element rendered before the text, such as an icon. */
  icon?: ReactNode;
  /** Override the auto-dismiss timeout for this message only. */
  duration?: number;
  /** Optional press handler called before the toast dismiss animation runs. */
  onPress?: () => void;
}

/**
 * Runtime configuration merged into a single object stored in context.
 * Consumers can update values via {@link ToastContextProps.setToastConfig}.
 */
export interface ToastConfig {
  /** Typography customisation for built-in toast layout. */
  font?: {
    fontFamilyRegular?: string | null;
    fontFamilyBold?: string | null;
  };
  /** Background colours for each toast variant. */
  bgColor: Record<ToastType, string>;
  /** Global auto-dismiss duration in milliseconds. */
  timeToDismiss: number;
  /** Gap between stacked toasts (default: 12). */
  spacing?: number;
  /** Position of the toast stack (default: bottom). */
  placement?: ToastPlacement;
  /** Additional offset applied on top of the safe-area inset. */
  offset?: number;
  /** Animation tuning parameters for enter/exit transitions. */
  animation?: {
    /** Initial translation distance in pixels. */
    initialTranslation?: number;
    /** Duration of the entrance animation in milliseconds. */
    appearDuration?: number;
    /** Duration of the exit animation in milliseconds. */
    disappearDuration?: number;
    /** Easing function applied to both animations. */
    easing?: ToastEasingFunction;
  };
  /**
   * Allows overriding the default wrapper styling used by the built-in toast card.
   * Applied in addition to the base style.
   */
  toastStyle?: StyleProp<ViewStyle>;
  /** Additional style for the toast title text. */
  titleStyle?: StyleProp<TextStyle>;
  /** Additional style for the toast message text. */
  messageStyle?: StyleProp<TextStyle>;
  /**
   * Provide a render hook to replace the default toast component.
   * Receives the generated default toast so consumers can reuse parts of it.
   */
  renderToast?: (options: {
    message: ToastMessage;
    index: number;
    defaultToast: ReactElement;
  }) => ReactElement;
}

/** Public API exposed through {@link useToast}. */
export interface ToastContextProps {
  /** Push a new toast into the stack. */
  addToast(message: Omit<ToastMessage, 'id'>): void;
  /** Remove a toast by id, or fall back to the most recent toast. */
  removeToast(id?: string): void;
  /** Merge new configuration values with the current provider config. */
  setToastConfig(config: Partial<ToastConfig>): void;
}

/** Props accepted by the {@link ToastProvider}. */
export interface ToastProviderProps {
  children: ReactNode;
  /** Optional configuration applied on mount and used as defaults. */
  initialConfig?: Partial<ToastConfig>;
}
