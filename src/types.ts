import type { ReactElement, ReactNode } from 'react';
import type { StyleProp, TextStyle, ViewStyle } from 'react-native';

/** Permitted toast variants for built-in styling. */
export type ToastType = 'success' | 'error' | 'info' | 'warning';

/** Placement for the toast stack within the viewport. */
export type ToastPlacement = 'top' | 'bottom';

/** Horizontal alignment for toast cards. */
export type ToastHorizontalPosition = 'left' | 'center' | 'right';

/**
 * Combined position controls. `vertical` defaults to the legacy `placement`,
 * while `horizontal` enables aligning the stack left/right/center.
 */
export interface ToastPosition {
  vertical?: ToastPlacement;
  horizontal?: ToastHorizontalPosition;
}

/** Signature for easing functions used by react-native Animated. */
export type ToastEasingFunction = (value: number) => number;

/**
 * Shape of a toast message managed by the provider.
 * Optional properties extend customisation without breaking existing usage.
 *
 * Accessibility: All text content is announced to screen readers. Use `accessibilityLabel`
 * and `accessibilityHint` to provide additional context for users of assistive technology.
 */
export interface ToastMessage {
  /** Unique identifier generated by the provider. */
  id: string;
  /** Type controls background colour through the active config. Defaults to `info`. */
  type?: ToastType;
  /** Optional heading displayed above the message body. */
  title?: string;
  /** Core message presented to the user. */
  message: string;
  /** Optional React element rendered before the text, such as an icon. */
  icon?: ReactNode;
  /** Override the auto-dismiss timeout for this message only. */
  duration?: number;
  /** Optional press handler called before the toast dismiss animation runs. */
  onPress?: () => void;
  /** Per-toast style override for the card wrapper. */
  style?: StyleProp<ViewStyle>;
  /** Per-toast background color override. */
  backgroundColor?: string;
  /** Per-toast border radius override (in pixels). */
  borderRadius?: number;
  /** Per-toast padding override. */
  padding?: {
    vertical?: number;
    horizontal?: number;
  };
  /** Per-toast font size override for message text (in pixels). */
  messageFontSize?: number;
  /** Per-toast font size override for title text (in pixels). */
  titleFontSize?: number;

  // Accessibility Properties
  /**
   * Custom accessibility label for screen readers.
   * If not provided, automatically generated from title and message.
   * Maximum 150 characters recommended for optimal screen reader experience.
   *
   * @example
   * accessibilityLabel="Payment successful. Your order #12345 is confirmed."
   */
  accessibilityLabel?: string;

  /**
   * Additional context announced after accessibilityLabel.
   * Typically describes available actions or toast purpose.
   * Automatically includes "Double tap to dismiss" if onPress is provided.
   * Maximum 100 characters recommended.
   *
   * @example
   * accessibilityHint="Tap to view order details"
   */
  accessibilityHint?: string;

  /**
   * Allows user font scaling preferences to affect toast text size.
   * Default: false (respects app-level default).
   *
   * When true, respects the device's "Text Size" accessibility setting,
   * allowing low-vision users to increase text size as needed.
   * When false, toast uses exact specified or default font sizes.
   *
   * Recommended: true for better accessibility.
   *
   * @example
   * allowFontScaling: true
   */
  allowFontScaling?: boolean;

  /**
   * Maximum number of lines for message text.
   * Default: 2
   *
   * Set to 0 for unlimited lines (use with caution - may create
   * excessively tall toasts). Screen reader text is not truncated
   * regardless of this setting.
   *
   * Note: Text truncation in UI doesn't affect screen reader output.
   */
  messageMaxLines?: number;

  /**
   * Whether to enable haptic feedback on toast appearance.
   * Default: false
   *
   * Values:
   * - false: No haptic feedback
   * - 'light': Subtle notification (iOS: impactOccurred; Android: performHapticFeedback)
   * - 'medium': Standard notification
   * - 'heavy': Strong notification
   * - 'success': Success pattern (iOS only)
   * - 'warning': Warning pattern (iOS only)
   * - 'error': Error pattern (iOS only)
   *
   * Improves tactile feedback for users, especially useful when
   * visual notification might be missed.
   *
   * @example
   * hapticFeedback: 'light'
   */
  hapticFeedback?:
    | false
    | 'light'
    | 'medium'
    | 'heavy'
    | 'success'
    | 'warning'
    | 'error';
}

/**
 * Runtime configuration merged into a single object stored in context.
 * Consumers can update values via {@link ToastContextProps.setToastConfig}.
 *
 * Accessibility: Configuration supports screen readers, high contrast,
 * and respects device accessibility settings. See `accessibility` section below.
 */
export interface ToastConfig {
  /** Typography customisation for built-in toast layout. */
  font?: {
    fontFamilyRegular?: string | null;
    fontFamilyBold?: string | null;
    /** Font size for the toast message text (default: 14). */
    messageFontSize?: number;
    /** Font size for the toast title text (default: 16). */
    titleFontSize?: number;
  };
  /** Background colours for each toast variant. */
  bgColor: Record<ToastType, string>;
  /** Global auto-dismiss duration in milliseconds. */
  timeToDismiss: number;
  /** Gap between stacked toasts (default: 12). */
  spacing?: number;
  /** Position of the toast stack (default: bottom). */
  placement?: ToastPlacement;
  /** Horizontal alignment for the toast stack (default: center). */
  horizontalPosition?: ToastHorizontalPosition;
  /** Full position override combining vertical and horizontal preferences. */
  position?: ToastPosition;
  /** Additional offset applied on top of the safe-area inset. */
  offset?: number;
  /** Animation tuning parameters for enter/exit transitions. */
  animation?: {
    /** Initial translation distance in pixels. */
    initialTranslation?: number;
    /** Duration of the entrance animation in milliseconds. */
    appearDuration?: number;
    /** Duration of the exit animation in milliseconds. */
    disappearDuration?: number;
    /** Easing function applied to both animations. */
    easing?: ToastEasingFunction;
  };
  /** Global border radius for toast cards (default: 12). */
  borderRadius?: number;
  /** Global padding for toast cards. */
  padding?: {
    vertical?: number;
    horizontal?: number;
  };
  /** Global horizontal margin for toast cards (default: 16). Only applies to top/bottom positions. */
  marginHorizontal?: number;
  /** Shadow customization for toast cards. */
  shadow?: {
    color?: string;
    opacity?: number;
    offset?: { width: number; height: number };
    radius?: number;
  };
  /**
   * Allows overriding the default wrapper styling used by the built-in toast card.
   * Applied in addition to the base style.
   */
  toastStyle?: StyleProp<ViewStyle>;
  /** Additional style for the toast title text. */
  titleStyle?: StyleProp<TextStyle>;
  /** Additional style for the toast message text. */
  messageStyle?: StyleProp<TextStyle>;
  /**
   * Provide a render hook to replace the default toast component.
   * Receives the generated default toast so consumers can reuse parts of it.
   */
  renderToast?: (options: {
    message: ToastMessage;
    index: number;
    defaultToast: ReactElement;
  }) => ReactElement;

  // Accessibility Configuration
  /**
   * Global accessibility settings for all toasts.
   * Per-toast settings override these defaults.
   */
  accessibility?: {
    /**
     * Enable font scaling based on device accessibility settings.
     * Default: false (for consistent visual design)
     *
     * When true, respects the device's "Text Size" accessibility setting,
     * allowing users to adjust toast text size via device settings.
     * Recommended for better WCAG 2.1 compliance.
     *
     * @example
     * accessibility: { allowFontScaling: true }
     */
    allowFontScaling?: boolean;

    /**
     * Default maximum lines for toast message text.
     * Default: 2
     *
     * Per-toast messageMaxLines overrides this value.
     * Set to 0 for unlimited lines (caution: may create tall toasts).
     */
    messageMaxLines?: number;

    /**
     * Enable haptic feedback on toast appearance by default.
     * Default: false
     *
     * Per-toast hapticFeedback overrides this value.
     * Can be 'light', 'medium', 'heavy', 'success', 'warning', 'error', or false.
     *
     * Improves tactile feedback for users, especially beneficial for
     * notifications that might be missed visually.
     *
     * @example
     * accessibility: { hapticFeedback: 'light' }
     */
    hapticFeedback?:
      | false
      | 'light'
      | 'medium'
      | 'heavy'
      | 'success'
      | 'warning'
      | 'error';

    /**
     * Text colors for each toast variant for contrast verification.
     * Used to validate WCAG 2.1 AA color contrast compliance.
     *
     * Format: RGB array [r, g, b] with values 0-255
     * or hex string '#RRGGBB'
     *
     * @example
     * accessibility: {
     *   textColors: {
     *     success: [255, 255, 255], // white text
     *     error: [255, 255, 255],
     *     warning: [0, 0, 0],
     *     info: [255, 255, 255],
     *   }
     * }
     */
    textColors?: Partial<Record<ToastType, [number, number, number] | string>>;

    /**
     * Enable automatic accessibility announcements when toast appears.
     * Default: true (recommended for better UX)
     *
     * When true, uses accessibilityLiveRegion to announce toast
     * to screen reader users immediately upon appearance.
     */
    announceOnAppear?: boolean;

    /**
     * Accessibility role for each toast type override.
     * Default: { info: 'alert', success: 'status', warning: 'alert', error: 'alert' }
     *
     * Maps toast types to ARIA roles:
     * - 'alert': Announces immediately with assertive priority
     * - 'status': Announces with polite priority (lower interruption)
     * - 'button': Toast is interactive
     *
     * @example
     * accessibility: {
     *   roleMap: {
     *     success: 'status',
     *     error: 'alert',
     *   }
     * }
     */
    roleMap?: Partial<Record<ToastType, string>>;
  };
}

/** Public API exposed through {@link useToast}. */
export interface ToastContextProps {
  /** Push a new toast into the stack. */
  addToast(message: Omit<ToastMessage, 'id'>): void;
  /** Remove a toast by id, or fall back to the most recent toast. */
  removeToast(id?: string): void;
  /** Merge new configuration values with the current provider config. */
  setToastConfig(config: Partial<ToastConfig>): void;
}

/** Props accepted by the {@link ToastProvider}. */
export interface ToastProviderProps {
  children: ReactNode;
  /** Optional configuration applied on mount and used as defaults. */
  initialConfig?: Partial<ToastConfig>;
}
